{"version":3,"sources":["../../src/models/auth.model.js"],"names":["createUser","authenticateUser","findUser","userObj","Promise","resolve","reject","UserModel","find","err","user","error","errorObj","INTERNAL_SERVER_ERROR","req","res","next","body","name","email","password","role","USER_ROLE_REGULAR","userData","validateSync","status","message","then","data","length","USERNAME_EXIST","userPwd","create","json","catch","username","userDetail","tokken","jwt","sign","secretKey","INVALID_PASSWORD","INVAILD_USERNAME"],"mappings":"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","file":"auth.model.js","sourcesContent":["import jwt from \"jsonwebtoken\";\r\n\r\nimport UserModel from \"../schema/user.schema\";\r\nimport { USER_ROLE_REGULAR } from \"../constant/constants\";\r\nimport errorObj from \"../constant/error\";\r\n\r\nimport {\r\n  passwordEncryptionLogic,\r\n  verifyUserPassword,\r\n  secretKey\r\n} from \"../common/encrypt\";\r\n\r\n/**\r\n * find the user into db based on the passed criteria\r\n * @param {*} userObj\r\n * @returns {Promise<any>}\r\n */\r\nfunction findUser(userObj) {\r\n  return new Promise((resolve, reject) => {\r\n    UserModel.find(userObj, (err, user) => {\r\n      if (err) {\r\n        return reject({ error: err, ...errorObj.INTERNAL_SERVER_ERROR });\r\n      }\r\n      return resolve(user);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * verify the user object received and then saves the user onto the db\r\n * @export\r\n * @param {Request} req\r\n * @param {Response} res\r\n * @param {NextFunction} next\r\n * @returns {void}\r\n */\r\nexport function createUser(req, res, next) {\r\n  const body = req.body,\r\n    userObj = {\r\n      name: body.name,\r\n      email: body.email,\r\n      password: body.password,\r\n      role: body.role || USER_ROLE_REGULAR\r\n    },\r\n    userData = new UserModel(userObj);\r\n\r\n  const error = userData.validateSync();\r\n  if (error) {\r\n    return next({\r\n      error: error,\r\n      status: 400,\r\n      message: error.message\r\n    });\r\n  }\r\n\r\n  findUser({ email: body.email })\r\n    .then(data => {\r\n      if (data && data.length) {\r\n        return next(errorObj.USERNAME_EXIST);\r\n      }\r\n      const userPwd = passwordEncryptionLogic(body.email, body.password);\r\n      userObj.password = userPwd;\r\n\r\n      UserModel.create(userObj, (err, user) => {\r\n        if (err) {\r\n          return next({ error: err, ...errorObj.INTERNAL_SERVER_ERROR });\r\n        }\r\n        res.json(user);\r\n      });\r\n    })\r\n    .catch(err => {\r\n      return next({ error: err, ...errorObj.INTERNAL_SERVER_ERROR });\r\n    });\r\n}\r\n\r\n/**\r\n * finds the user and verifies the user details and\r\n * returns valid JWT tokken to user\r\n * @export\r\n * @param {Request} req\r\n * @param {Response} res\r\n * @param {NextFunction} next\r\n */\r\nexport function authenticateUser(req, res, next) {\r\n  const body = req.body;\r\n  const { username, password } = body;\r\n\r\n  findUser({ email: username })\r\n    .then(data => {\r\n      if (data && data.length) {\r\n        const userDetail = data[0];\r\n        const status = verifyUserPassword(\r\n          username,\r\n          password,\r\n          userDetail.password\r\n        );\r\n        if (status) {\r\n          const tokken = jwt.sign(body, secretKey);\r\n          res.json({\r\n            email: userDetail.email,\r\n            name: userDetail.name,\r\n            role: userDetail.role,\r\n            tokken: tokken\r\n          });\r\n        } else {\r\n          return next(errorObj.INVALID_PASSWORD);\r\n        }\r\n      } else {\r\n        return next(errorObj.INVAILD_USERNAME);\r\n      }\r\n    })\r\n    .catch(err => {\r\n      return next({ error: err, ...errorObj.INTERNAL_SERVER_ERROR });\r\n    });\r\n}\r\n"]}